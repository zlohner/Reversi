Heuristic <- Zac ✔︎

	Heuristic now based on

	1) compute the sum of cells held for self/opponent and multiply by value for that cell
	2) add the difference between available moves to each player

	thoughts:
		lower value for edge squares next to edge squares that have already been taken, can "steal" an edge by leaving space
		higher value for "inner" squares (those that are fully surrounded)

Algorithm
	Alphabeta pruning core - can be seeded with previous results <- Zac ✔︎
	Iterative deepening to max depth within allowed time <- Matt
	Use priority queue to explore promising (most likely to let us prune the most nodes) moves first <- Zac

Timing
	Heuristic to determine best amount of time to use per move: <- Matt
		At each level of iterative deepening, estimate time cost of depth + 1 and stop if more than allotted remaining time

Data Structures
	Node w/ Alpha, Beta, Heuristic, boardState ✔︎
	Minimax takes a node and therefore the timer can update the tree with new information ✔︎
	Save previously explored nodes (memoization) <- ?
	Immutable data structure for state? <- Zac
